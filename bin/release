#! /bin/sh

bold=$(tput bold)
normal=$(tput sgr0)

major() {
  echo "$1" | cut -sd'.' -f1
}

minor() {
  echo "$1" | cut -sd'.' -f2
}

hotfix() {
  echo "$1" | cut -sd'.' -f3
}

incMajorVersion() {
  printf "%s.0" $(($(major "$1") + 1))
}

incMinorVersion() {
  printf "%s.%s" "$(major "$1")" $(($(minor "$1") + 1))
}

incHotfixVersion() {
  printf "%s.%s.%s" "$(major "$1")" "$(minor "$1")" $(($(hotfix "$1") + 1))
}

currentVersion() {
  sbt version | grep -A2 "version" | tail -1 | awk '{ print $2 }' | cut -d'+' -f1
}

isDirty() {
  if [ "" = "$(git diff HEAD)" ]; then
      false
    else
      true
    fi
}

releaseVersion() {
  if isDirty; then
    printf "Repository is dirty. Please commit your changes first.\n"
    exit 1
  fi
  newVersion="$($1 "$(currentVersion)")"
  printf "Version: ${bold}%s${normal} [Y/n] " "$newVersion"
  read -r answer
  if [ "$answer" != "${answer#[Yy]}" ] || [ "$answer" = "" ] ;then
    printf "Create tag 'v%s'.\n" "$newVersion"
    git tag -a "v$newVersion" -m "version $newVersion"
    printf "Push tag 'v%s' to origin.\n" "$newVersion"
    git push origin "v$newVersion" 2> /dev/null
    sbt ";clean ;publishSigned ;sonatypeBundleUpload"
  fi

}

case "$1" in
  "major")
    releaseVersion "incMajorVersion"
    ;;
  "minor")
    releaseVersion "incMinorVersion"
    ;;
  "hotfix")
    releaseVersion "incHotfixVersion"
    ;;
  "")
    printf "Parameter missing.\n"
    printf "Usage: release [major|minor|hotfix]\n"
    exit 1
    ;;
  "help")
    printf "Usage: release [major|minor|hotfix]\n"
    exit 1
    ;;
  *)
    printf "Unknown parameter: %s\n" "$1"
    printf "Usage: release [major|minor|hotfix]\n"
    exit 1
    ;;
esac
